#!/usr/bin/env perl

use strict;
use utf8;
use lib 'buildscripts';

use BuildScript;
my $C = require C;


##############################################################################
#
# :: Run TokTok Android tests.
#
##############################################################################


# Run adb logcat -d on test failure.
my $LOGCAT_ON_FAILURE = 1;

my $PLATFORM = "android-24";

my %ABI = (
   # Target triple                                     Emulator binary   Image ABI      NDK ABI
   'arm-linux-androideabi' => ($ENV{TRAVIS} ? undef : ['emulator',       'armeabi-v7a', 'armeabi-v7a']),
   'aarch64-linux-android' => ($ENV{TRAVIS} ? undef : ['emulator64-arm', 'arm64-v8a',   'arm64-v8a']),
   'i686-linux-android'    => ($ENV{TRAVIS} ? undef : ['emulator',       'x86',         'x86']),
   'x86_64-linux-android'  => ($ENV{TRAVIS} ? undef : ['emulator64-x86', 'x86_64',      'x86_64']),
);


my $emulator_pid = 0;
END {
   kill 2, $emulator_pid if $emulator_pid;
}

my $TARGET = $C->TARGET;

my $abi = $ABI{$C->TARGET};
# Do nothing if the ABI is not supported or this is not an Android build.
if ($abi) {
   my ($abi_emulator, $abi_name, $abi_native_name) = @$abi;

   must_system "git", "clone", "http://github.com/iphydf/toktok", "toktok"
      unless -e "toktok";

   my $native_lib_dir = "toktok/src/main/libs/$abi_native_name";

   my $native_lib_dst = "$native_lib_dir/libtox4j-c.so";
   my $native_lib_src = "target/$TARGET/libtox4j-c.so";
   if (-f $native_lib_src) {
      print "Copying native library from $native_lib_src to $native_lib_dst\n";
      must_system "cp", "-a", $native_lib_src, $native_lib_dst;
   }

   my ($adb_state) = must_popen "adb", "get-state";
   if ($adb_state ne "device") {
      my @targets = grep { /^android-/ } must_popen "android", "list", "targets", "-c";
      my ($target) = grep { $_ eq $PLATFORM } @targets;
      $target ||= $targets[-1];
      print "Available targets: @targets, selecting $target\n";

      must_system "echo no | android create avd --force -n test-$abi_native_name -t $target --abi $abi_name";
      if (not ($emulator_pid = fork)) {
         print "Changing directory to $ENV{ANDROID_HOME}/tools\n";
         chdir "$ENV{ANDROID_HOME}/tools";
         my @args = ($abi_emulator, "-avd", "test-$abi_native_name", "-no-audio", "-no-skin", "-no-window");
         BuildScript::show \@args;
         exec @args;
         die "exec failed: $!";
      }
      print "Waiting for device to be online\n";
      must_system "adb", "wait-for-device";
#      print "Device online; waiting 2 minutes for boot animation to stop\n";
#      for (0 .. 120) {
#         my ($bootanim) = must_popen -q => "adb", "shell", "getprop", "init.svc.bootanim";
#         print "Boot animation $bootanim (after $_ seconds)\r";
#         last if $bootanim eq "stopped";
#         sleep 1;
#      }
   }
   print "\nUnlocking screen\n";
   must_system "adb", "shell", "input", "keyevent", "82";

   pushd {
      must_system "adb", "logcat", "-c";
      if ($LOGCAT_ON_FAILURE) {
         system "sbt", "clean", "android:test";
         if ($?) {
            must_system "adb", "logcat", "-d";
            die "Android tests failed";
         }
      } else {
         must_system "sbt", "clean", "android:test";
      }
   } "toktok";
}
